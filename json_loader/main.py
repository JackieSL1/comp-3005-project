import psycopg 
import json
import os
import time

DATABASE: str = "testing"
USERNAME: str = "postgres"
PASSWORD: str = "postgres"
DATA_PATH: str = "./open-data/data/"
SEASONS: list[str] = [
    "2020/2021",
    "2019/2020",
    "2018/2019",
    "2003/2004",
]

# TODO: Could move this to a separate config file for easier modification 
# (doesn't really matter though)

# NOTE: When adding a new table, add its columns here
COLUMNS = {
    "competitions": (
        "competition_id",
        "season_id",
        "season_name",
        "country_name",
        "competition_name",
        "competition_gender",
        "competition_youth",
        "competition_international",
    ),
    # "seasons": (
    # ),
    "countries": (
        "country_id",
        "name",
    ),
    "managers": (
        "manager_id",
        "name",
        "nickname",
        "dob",
        "country_id",
    ),
    "team_managers": (
        "team_id",
        "manager_id",
    ),
    "competition_stages": (
        "competition_stage_id",
        "name",
    ),
    "stadiums": (
        "stadium_id",
        "name",
        "country_id",
    ),
    "referees": (
        "referee_id",
        "name",
        "country_id",
    ),
    "matches": (
        "match_id",
        "match_date",
        "kick_off",
        "competition_id",
        "season_id",
        "home_team_id",
        "away_team_id",
        "home_score",
        "away_score",
        "match_week",
        "competition_stage_id",
        "stadium_id",
        "referee_id",
    ),
    "teams": (
        "team_id",
        "team_name",
        "team_gender",
        "team_group",
        "country_id",
    ),
    "lineups": (
        # "lineup_id", TODO: Could be useful - autogenerated anyways if not added?
        "match_id",
        "team_id",
        "player_id",
    ),
    "players": (
        "player_id",
        "player_name",
        "player_nickname",
        "jersey_number",
        "country",
    ),
    "cards": (
        "player_id",
        "match_id",
        "time",
        "card_type",
        "reason",
        "period",
    ),
    "positions": (
        "position_id",
        "position",
    ),
    "player_positions": (
        "player_id",
        "match_id",
        "position_id",
        "\"from\"",
        "\"to\"",
        "from_period",
        "to_period",
        "start_reason",
        "end_reason",
    ),
    "event_types": (
        "event_type_id",
        "name",
    ),
    "play_patterns": (
        "play_pattern_id",
        "name",
    ),
    "events": (
        "id",
        "match_id",
        "index",
        "period",
        "timestamp",
        "minute",
        "second",
        "event_type_id",
        "posession",
        "posession_team_id",
        "play_pattern_id",
        "team_id",
        "player_id",
        "position",
        "location_x",
        "location_y",
        "duration",
    ),
    "shots": (
        "event_id",
        "statsbomb_xg",
    )
}

# TODO: Delete before submission
""" SCRATCH PAD
Tables:
competitions
seasons
countries
managers
competition_stages
stadiums
referees
matches
teams
team_managers
position
players
"""

def insert(cursor, table, tuples):
    columns = COLUMNS[table]

    for record in tuples:
        cursor.execute(f"""
                        INSERT INTO {table} ({', '.join(columns)})
                        VALUES ({', '.join(['%s'] * len(columns))})
                        """, record)

def remove_duplicates_from_tuples(tuples: list[tuple]):
    seen_ids = set()
    def unique(tup: tuple) -> bool:
        if tup[0] in seen_ids:
            return False

        seen_ids.add(tup[0])
        return True

    return filter(unique, tuples)

def build_tuple_from_json(json: dict, keys: list) -> tuple:
    result = []

    for key in keys:
        if type(key) == str:
            # If key is a single string, extract that value
            result.append(json.get(key))
        else:
            # Otherwise the key should be a list of keys - iterate to find nested value
            value = json
            for nested_key in key:
                value = value.get(nested_key)
                if value is None:
                    break

            result.append(value)

    return tuple(result)




def main():
    if not os.path.isdir(DATA_PATH):
        raise Exception(f"error: Couldn't find open-data at \"{DATA_PATH}\". Make sure it's been added to the project's root directory")


    with psycopg.connect(f"dbname={DATABASE} user={USERNAME} password={PASSWORD}") as conn:
        with conn.cursor() as cursor:
            competition_ids = set()
            season_ids = set()
            competition_tuples = []
            # season_tuples = []

            # TODO: This shouldn't be run everytime - remove when script is done
            # with open("./ddl.sql", 'r') as ddl:
            #     cursor.execute(ddl.read()) # type: ignore

            with open(f"{DATA_PATH}competitions.json", "r", encoding="utf-8") as f:
                data = json.load(f)
                for competition in data:

                    # Skip data related to other seasons
                    if competition['season_name'] not in SEASONS:
                        continue

                    competition_tuples.append(build_tuple_from_json(competition, (
                        'competition_id',
                        'season_id',
                        'season_name',
                        'country_name',
                        'competition_name',
                        'competition_gender',
                        'competition_youth',
                        'competition_international',
                    )))

                    competition_ids.add(competition['competition_id'])
                    season_ids.add(competition['season_id'])

            # Build list of json files with matches data
            matches_paths = []
            for id in competition_ids:
                with os.scandir(f"{DATA_PATH}matches/{id}") as dirs:
                    for path in dirs:
                        if int(path.name.split(".")[0]) in season_ids:
                            matches_paths.append(path.path)

            country_tuples = []
            manager_tuples = []
            competition_stage_tuples = []
            stadium_tuples = []
            referee_tuples = []
            match_tuples = []
            team_tuples = []
            team_manager_tuples = []
            
            # Used to find lineups
            match_ids = set()

            for path in matches_paths:
                with open(path, "r", encoding = "utf-8") as f:
                    data = json.load(f)

                    for match in data:
                        match_ids.add(match["match_id"])

                        for country in (match["home_team"]["country"],
                                        match["away_team"]["country"],
                                        ):
                            country_tuples.append((
                                country["id"],
                                country["name"],
                            ))

                        referee = match.get("referee")
                        if referee is not None:
                            country_tuples.append((
                                referee["country"]["id"],
                                referee["country"]["name"],
                            ))
                            referee_tuples.append((
                                match["referee"]["id"],
                                match["referee"]["name"],
                                match["referee"]["country"]["id"],
                            ))
                            referee = referee["id"]

                        stadium = match.get("stadium")
                        if stadium is not None:
                            country_tuples.append((
                                stadium["country"]["id"],
                                stadium["country"]["name"],
                            ))
                            stadium_tuples.append((
                                stadium["id"],
                                stadium["name"],
                                stadium["country"]["id"],
                            ))
                            stadium = stadium["id"]

                        for manager in match["home_team"].get("managers", ()):
                            manager_tuples.append((
                                manager["id"],
                                manager["name"],
                                manager["nickname"],
                                manager["dob"],
                                manager["country"]["id"],
                            ))
                            country_tuples.append((
                                manager["country"]["id"],
                                manager["country"]["name"],
                            ))
                            team_manager_tuples.append((
                                match["home_team"]["home_team_id"],
                                manager["id"],
                            ))

                        for manager in match["away_team"].get("managers", ()):
                            manager_tuples.append((
                                manager["id"],
                                manager["name"],
                                manager["nickname"],
                                manager["dob"],
                                manager["country"]["id"],
                            ))
                            country_tuples.append((
                                manager["country"]["id"],
                                manager["country"]["name"],
                            ))
                            team_manager_tuples.append((
                                match["away_team"]["away_team_id"],
                                manager["id"],
                            ))

                        competition_stage_tuples.append((
                            match["competition_stage"]["id"],
                            match["competition_stage"]["name"],
                        ))

                        team_tuples.append((
                            match["home_team"]["home_team_id"],
                            match["home_team"]["home_team_name"],
                            match["home_team"]["home_team_gender"],
                            match["home_team"]["home_team_group"],
                            match["home_team"]["country"]["id"],
                        ))

                        team_tuples.append((
                            match["away_team"]["away_team_id"],
                            match["away_team"]["away_team_name"],
                            match["away_team"]["away_team_gender"],
                            match["away_team"]["away_team_group"],
                            match["away_team"]["country"]["id"],
                        ))

                        match_tuples.append((
                            match["match_id"],
                            match["match_date"],
                            match["kick_off"],
                            match["competition"]["competition_id"],
                            match["season"]["season_id"],
                            match["home_team"]["home_team_id"],
                            match["away_team"]["away_team_id"],
                            match["home_score"],
                            match["away_score"],
                            match["match_week"],
                            match["competition_stage"]["id"],
                            stadium,
                            referee,
                        ))


            # Build list of json files with lineups data
            lineups_paths = []
            for id in match_ids:
                lineups_paths.append(f"{DATA_PATH}lineups/{id}.json")

            lineup_tuples = []
            player_tuples = []
            card_tuples = []
            position_tuples = []
            player_position_tuples = []

            for path in lineups_paths:
                with open(path, "r", encoding = "utf-8") as f:
                    data = json.load(f)

                    for lineup in data:
                        match_id = path.split("/")[-1].split(".")[0]
                        for player in lineup["lineup"]:

                            player_tuples.append((
                                player["player_id"],
                                player["player_name"],
                                player["player_nickname"],
                                player["jersey_number"],
                                player["country"]["id"],
                            ))

                            lineup_tuples.append((
                                match_id,
                                lineup["team_id"],
                                player["player_id"],
                            ))

                            country_tuples.append((
                                player["country"]["id"],
                                player["country"]["name"],
                            ))

                            for card in player["cards"]:
                                card_tuples.append((
                                    player["player_id"],
                                    match_id,
                                    card["time"],
                                    card["card_type"],
                                    card["reason"],
                                    card["period"],
                                ))

                            for position in player["positions"]:
                                position_tuples.append((
                                    position["position_id"], 
                                    position["position"],
                                ))

                                player_position_tuples.append((
                                    player["player_id"],
                                    match_id,
                                    position["position_id"], 
                                    position["from"],
                                    position["to"],
                                    position["from_period"],
                                    position["to_period"],
                                    position["start_reason"],
                                    position["end_reason"],
                                ))

            # Build list of json files with events data
            events_paths = []
            for id in match_ids:
                events_paths.append(f"{DATA_PATH}events/{id}.json")

            events = []
            shots = []
            play_patterns = []
            event_types = []

            for path in events_paths:
                with open(path, "r", encoding = "utf-8") as f:
                    data = json.load(f)

                    for event in data:
                        match_id = path.split("/")[-1].split(".")[0]

                        play_patterns.append((
                            event["play_pattern"]["id"],
                            event["play_pattern"]["name"],
                        ))

                        event_types.append((
                            event["type"]["id"],
                            event["type"]["name"],
                        ))

                        if event.get("position"):
                            position_tuples.append((
                                event["position"]["id"],
                                event["position"]["name"],
                            ))

                        if event.get("location"):
                            location_x, location_y = event.get("location")
                        else:
                            location_x, location_y = None, None

                        events.append((
                            event["id"],
                            match_id,
                            event["index"],
                            event["period"],
                            event["timestamp"],
                            event["minute"],
                            event["second"],
                            event["type"]["id"],
                            event.get("possession"),
                            event.get("possession_team", {}).get("id"),
                            event.get("play_pattern", {}).get("id"),
                            event.get("team", {}).get("id"),
                            event.get("player", {}).get("id"),
                            event.get("position", {}).get("id"),
                            location_x,
                            location_y,
                            event.get("duriation"),
                        ))

                        match event["type"]["name"]:
                            case "Ball Recovery":
                                pass
                            case "Dispossessed":
                                pass
                            case "Duel":
                                pass
                            case "Camera On":
                                pass
                            case "Block":
                                pass
                            case "Offside":
                                pass
                            case "Clearance":
                                pass
                            case "Interception":
                                pass
                            case "Dribble":
                                pass
                            case "Shot":
                                shot = event["shot"]
                                shots.append((
                                    event["id"],
                                    shot["statsbomb_xg"],
                                ))
                            case "Pressure":
                                pass
                            case "Half Start":
                                pass
                            case "Substitution":
                                pass
                            case "Own Goal Against":
                                pass
                            case "Foul Won":
                                pass
                            case "Foul Committed":
                                pass
                            case "Goal Keeper":
                                pass
                            case "Bad Behaviour":
                                pass
                            case "Own Goal For":
                                pass
                            case "Player On":
                                pass
                            case "Player Off":
                                pass
                            case "Shield":
                                pass
                            case "Camera off":
                                pass
                            case "Pass":
                                pass
                            case "50/50":
                                pass
                            case "Half End":
                                pass
                            case "Starting XI":
                                pass
                            case "Tactical Shift":
                                pass
                            case "Error":
                                pass
                            case "Miscontrol":
                                pass
                            case "Dribbled Past":
                                pass
                            case "Injury Stoppage":
                                pass
                            case "Referee Ball-Drop":
                                pass
                            case "Ball Receipt*":
                                pass
                            case "Carry":
                                pass
                            case _:
                                raise Exception("error: Event type " + event["type"]["name"] + " not recognized")


            # Insert all data
            insert(cursor, "competitions",  competition_tuples)
            insert(cursor, "countries",  remove_duplicates_from_tuples(country_tuples))
            insert(cursor, "competition_stages",  remove_duplicates_from_tuples(competition_stage_tuples))
            insert(cursor, "stadiums",  remove_duplicates_from_tuples(stadium_tuples))
            insert(cursor, "referees",  remove_duplicates_from_tuples(referee_tuples))
            insert(cursor, "teams",  remove_duplicates_from_tuples(team_tuples))
            insert(cursor, "managers",  remove_duplicates_from_tuples(manager_tuples))
            insert(cursor, "team_managers",  remove_duplicates_from_tuples(team_manager_tuples))
            insert(cursor, "matches",  remove_duplicates_from_tuples(match_tuples))
            insert(cursor, "players",  remove_duplicates_from_tuples(player_tuples))
            insert(cursor, "lineups",  lineup_tuples)
            insert(cursor, "cards",  card_tuples)
            insert(cursor, "positions",  remove_duplicates_from_tuples(position_tuples))
            insert(cursor, "player_positions", remove_duplicates_from_tuples(player_position_tuples))
            insert(cursor, "event_types", remove_duplicates_from_tuples(event_types))
            insert(cursor, "play_patterns", remove_duplicates_from_tuples(play_patterns))
            insert(cursor, "events", events)
            insert(cursor, "shots", shots)


if __name__ == "__main__":
    start_time = time.time()
    main()
    print("--- %s seconds ---" % (time.time() - start_time))
